{"version":3,"sources":["logo.svg","BarnsleyFern.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BarnsleyFern","props","state","lim","canvas","this","refs","ctx","getContext","img","image","onload","r","max","w","width","h","height","x","y","xw","yw","fillStyle","fillRect","i","Math","floor","random","font","fillText","className","ref","src","alt","style","display","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,kC,iJC8C5BC,E,YA1CX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAACC,IAAK,KAFL,E,iFAKhB,IAAMC,EAASC,KAAKC,KAAKF,OACnBG,EAAMH,EAAOI,WAAW,MACxBC,EAAMJ,KAAKC,KAAKI,MAChBP,EAAME,KAAKH,MAAMC,IACvBM,EAAIE,OAAS,WACX,IAE0BC,EAEVC,EAJZC,EAAIV,EAAOW,MACXC,EAAIZ,EAAOa,OACXC,EAAE,EAAGC,EAAE,EAAGC,EAAG,EAAGC,EAAG,EAKvBd,EAAIe,UAAU,QAASf,EAAIgB,SAAS,EAAE,EAAET,EAAEE,GAE1C,IAAI,IAAIQ,EAAE,EAAGA,EAAErB,EAAKqB,IALJX,EAML,KAATD,EAN2Ba,KAAKC,MAAMD,KAAKE,SAASd,KAO7C,GAAIO,EAAG,EAAEC,EAAG,IAAKF,GACfP,GAAG,GAAIQ,EAAG,GAAIF,EAAE,IAAKC,EAAEE,EAAG,IAAKH,EAAE,IAAKC,EAAE,KACxCP,GAAG,IAAKQ,GAAI,IAAKF,EAAE,IAAKC,EAAEE,EAAG,IAAKH,EAAE,IAAKC,EAAE,MAC9CC,EAAG,IAAKF,EAAE,IAAKC,EAAEE,GAAI,IAAKH,EAAE,IAAKC,EAAE,KACzCD,EAAEE,EAAGD,EAAEE,EAAId,EAAIe,UAAU,QAASf,EAAIgB,SAAW,GAAFL,EAAK,IAAO,IAAFC,EAAK,IAAI,EAAE,GAGtEZ,EAAIqB,KAAO,eACXrB,EAAIsB,SAAS,aAAc,GAAI,Q,+BAKjC,OACE,yBAAKC,UAAU,gBACb,4BAAQC,IAAI,SAAShB,MAAO,IAAKE,OAAQ,MACzC,yBAAKc,IAAI,QAAQC,IAAI,cAAcC,IAAI,GAAGC,MAAO,CAACC,QAAS,QAASL,UAAU,gB,GAtC7DM,IAAMC,WCUlBC,MARf,WACE,OACA,yBAAKR,UAAU,OACf,kBAAC,EAAD,CAAcf,MAAM,MAAME,OAAO,UCIfsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66b2b619.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nclass BarnsleyFern extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {lim: 10000};\n    }\n    componentDidMount() {\n      const canvas = this.refs.canvas\n      const ctx = canvas.getContext(\"2d\")\n      const img = this.refs.image\n      const lim = this.state.lim;\n      img.onload = () => {\n        var w = canvas.width;\n        var h = canvas.height;\n        var x=0.,y=0.,xw=0.,yw=0.,r;\n        // Like in PARI/GP: return random number 0..max-1\n        function randgp(max) {return Math.floor(Math.random()*max)}\n        // Clean canvas\n\n        ctx.fillStyle=\"black\"; ctx.fillRect(0,0,w,h);\n        // MAIN LOOP\n        for(var i=0; i<lim; i++) {\n          r=randgp(100);\n          if (r<=1) {xw=0;yw=0.16*y;}\n          else if (r<=8) {xw=0.2*x-0.26*y;yw=0.23*x+0.22*y+1.6;}\n          else if (r<=15) {xw=-0.15*x+0.28*y;yw=0.26*x+0.24*y+0.44;}\n          else {xw=0.85*x+0.04*y;yw=-0.04*x+0.85*y+1.6;}\n          x=xw;y=yw; ctx.fillStyle=\"green\"; ctx.fillRect(x*50+260,-y*50+540,1,1);\n        }//fend i\n\n        ctx.font = \"44px Courier\" \n        ctx.fillText(\"Fractal Fx\", 10, 100)\n         \n      }\n    }\n    render() {\n      return(\n        <div className=\"barnsleyfern\">\n          <canvas ref=\"canvas\" width={640} height={425} />\n          <img ref=\"image\" src=\"favicon.ico\" alt=\"\" style={{display: 'none'}} className=\"hidden\" />\n        </div>\n      )\n    }\n  }\nexport default BarnsleyFern;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BarnsleyFern from './BarnsleyFern';\n\nfunction App() {\n  return (\n  <div className=\"App\">\n  <BarnsleyFern width=\"640\" height=\"425\"/>\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}